# make --debug=v
# run make in debug mode to see the commands that are executed

# Variables
CC = gcc
# -gcc: GNU Compiler Collection.
CFLAGS = -Wall -pthread
# -Wall: Enable all warnings.
# -pthread: Enable POSIX thread support (enables use of multithreading).
# -std=c11 Use the C11 standard. Not specifying a version will default to GNU11 for GCC 5.1 and later.
DEP_FLAGS = -MMD -MP
# -MMD: This flag tells the compiler to generate a .d file for each .c source file.
# These .d files contain dependency information, listing all the header files (.h) that the source file includes.
# It includes only user headers, not system headers. 
# -MP: Only adds phony targets for each dependency to prevent build errors if a header file is deleted
# (making them phony target means it will not try to build the deleted header file, which would have caused a build error).
RELEASE_FLAGS = $(CFLAGS) $(DEP_FLAGS)
DEBUG_FLAGS = $(CFLAGS) $(DEP_FLAGS) -g -D DEBUG
# -g: Include debugging information in the generated executables (such as variable names, line numbers, and function call stacks).
# -D DEBUG: Define the DEBUG macro to enable debugging.

# Source files
SRC = source/main.c source/processor.c
HDR = source/processor.h source/memory.h

# Build directory
BUILD_DIR = build

# Object files
OBJ = $(patsubst source/%.c, $(BUILD_DIR)/%.o, $(SRC))
OBJ_DEBUG = $(patsubst source/%.c, $(BUILD_DIR)/%.debug.o, $(SRC))
# patsubst source/%.c, $(BUILD_DIR)/%.o, $(SRC) replaces the source directory with the build directory
# and changes the file extension from .c to .o. This variable holds all the object files.

# Dependency files
DEP = $(OBJ:.o=.d)
# DEP = $(OBJ:.o=.d) tells make the names of the .d files (e.g., processor.o corresponds to processor.d). This variable holds all the generated .d files.
DEPS_DEBUG = $(OBJ_DEBUG:.debug.o=.d)

# Executables
EXE = $(BUILD_DIR)/main
EXE_DEBUG = $(BUILD_DIR)/main_debug

# Extensions
EXTENSIONS = .out .log .tar

# Create build directory if it doesn't exist
$(BUILD_DIR):
	@echo "Creating $(BUILD_DIR)"
	mkdir -p $(BUILD_DIR)

# Default target
.DEFAULT_GOAL := all


# Release Executables
all: $(EXE)

main: $(OBJ)
	@echo "Compiling $(OBJ)"
	$(CC) $(RELEASE_FLAGS) -o $@ $^
# -o: Output file name of the executable.
# $@: The name of the target (main).
# $^: The names of all the prerequisites $(OBJ), with spaces between them.


# Release Object files
$(BUILD_DIR)/%.o: source/%.c $(HDR) | $(BUILD_DIR)
	@echo "Compiling $<"
	$(CC) $(RELEASE_FLAGS) -c -o $@ $<
# %.o: Pattern rule for object files (target object files to be created).
# %.c: Pattern rule for source files (prerequisites).
# | $(BUILD_DIR): Order-only prerequisite (only checks if the build directory exists prior to building).
# -c: Compile or assemble the source files, but do not link.
# $<: The name of the first prerequisite (source file).


# Debug Executables
debug: $(BUILD_DIR) $(EXE_DEBUG)

main_debug: $(OBJ_DEBUG)
	@echo "Compiling $(OBJ_DEBUG)"
	$(CC) $(DEBUG_FLAGS) -o $@ $^


# Debug Object files
$(BUILD_DIR)/%.debug.o: source/%.c $(HDR) | $(BUILD_DIR)
	@echo "Compiling $<"
	$(CC) $(DEBUG_FLAGS) -c -o $@ $<


# Include dependency files
-include $(DEP)
# -include $(DEP) ensures that make reads and uses these .d files, which contain the dependencies generated by -MMD.
-include $(DEPS_DEBUG)
# Without this line, make would not use the .d files to track when to recompile object files based on changes in header files.


# Phony targets
.PHONY: all debug
		valgrind- valgrind-mem- gdb-
		valgrind_test_add_debug valgrind_test_sub_debug valgrind_test_overflow_debug valgrind_test_factors_debug
		test_add test_sub test_overflow test_factors
		test_add_debug test_sub_debug test_overflow_debug test_factors_debug
		test_add_provided test_sub_provided test_overflow_provided test_factors_provided
		tar untar clean
# Phony Targets are special targets in a Makefile that are not associated with actual files.
# They are typically used to represent actions or commands, such as clean, all, or install.
# By declaring a target as phony, you inform make that this target does not correspond to a
# real file, preventing potential conflicts or unexpected behavior.

# Debugging targets
# debug target must be executed before valgrind- can run
valgrind-: debug
	valgrind --leak-check=full ./$(EXE_DEBUG)
# --leak-check=full: Enable detailed leak checking.

valgrind-mem-: debug
	valgrind --tool=massif ./$(EXE_DEBUG)
# --tool=massif: Enable heap profiling.

gdb-: debug
	gdb ./$(EXE_DEBUG)


# Valgrind targets for debug tests
# "debug" target must be executed before valgrind- can run
valgrind_test_add_debug: debug
	cat test/add.svm | test/sasm | valgrind --leak-check=full ./source/main_debug

valgrind_test_sub_debug: debug
	cat test/sub.svm | test/sasm | valgrind --leak-check=full ./source/main_debug

valgrind_test_overflow_debug: debug
	cat test/overflow.svm | test/sasm | valgrind --leak-check=full ./source/main_debug

valgrind_test_factors_debug: debug
	cat test/factors.svm | test/sasm | valgrind --leak-check=full ./source/main_debug


# Test targets
test_add:
	cat test/add.svm | test/sasm | ./source/main

test_sub:
	cat test/sub.svm | test/sasm | ./source/main

test_overflow:
	cat test/overflow.svm | test/sasm | ./source/main

test_factors:
	cat test/factors.svm | test/sasm | ./source/main


test_add_debug:
	cat test/add.svm | test/sasm | ./source/main_debug

test_sub_debug:
	cat test/sub.svm | test/sasm | ./source/main_debug

test_overflow_debug:
	cat test/overflow.svm | test/sasm | ./source/main_debug

test_factors_debug:
	cat test/factors.svm | test/sasm | ./source/main_debug


test_add_provided:
	cat test/add.svm | test/sasm | test/svm

test_sub_provided:
	cat test/sub.svm | test/sasm | test/svm

test_overflow_provided:
	cat test/overflow.svm | test/sasm | test/svm

test_factors_provided:
	cat test/factors.svm | test/sasm | test/svm


# Clean target
clean:
	@for file in $(OBJ) $(OBJ_DEBUG) $(DEP) $(DEPS_DEBUG) $(EXE) $(EXE_DEBUG); do \
        echo "Removing $$file"; \
		rm -f $$file; \
    done
	@for ext in $(EXTENSIONS); do \
		echo "Removing *$$ext"; \
		rm -f *$$ext; \
	done
	@echo "Removing $(BUILD_DIR)"
	rm -rf $(BUILD_DIR)

# Tar target
tar:
	tar -cvf cmpt360-as01.tar makefile source test README.md

untar:
	tar -xvf cmpt360-as01.tar
